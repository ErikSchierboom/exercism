#
# Test rotate with some examples
#
# a0 - input string, for callee
# a1 - shift key, for callee
# a2 - pointer to output string, for callee
# s0 - num of tests left to run
# s1 - address of input string
# s2 - address of shift key
# s3 - address of expected output string
# s4 - char byte of expected output
# s5 - char byte of actual output
# s6 - copy of output location
# s7 - copy of address of expected output

.data

# number of test cases
n: .word 10
# input values and expected output values (all null terminated)
texts: .asciiz "a", "a", "a", "m", "n", "OMG", "O M G", "Testing 1 2 3 testing", "Let's eat, Grandma!", "The quick brown fox jumps over the lazy dog."
shift_keys: .word 0, 1, 26, 13, 13, 5, 5, 4, 21, 13
outs: .asciiz "a", "b", "a", "z", "a", "TRL", "T R L", "Xiwxmrk 1 2 3 xiwxmrk", "Gzo'n zvo, Bmviyhv!", "Gur dhvpx oebja sbk whzcf bire gur ynml qbt."

failmsg: .asciiz "failed for test input: "
shiftkeymsg: .asciiz " with shift key "
expectedmsg: .asciiz ". expected "
tobemsg: .asciiz " to be "
okmsg: .asciiz "all tests passed"

.text

runner:
        lw      $s0, n
        la      $s1, texts
        la      $s2, shift_keys
        la      $s3, outs

        li      $v0, 9                  # code for allocating heap memory
        li      $a0, 48                 # specify 48 bytes - length of longest expected output
        syscall

        move    $a2, $v0                # location of allocated memory is where callee writes result
        move    $s6, $v0                # also keep a copy for ourselves

run_test:
        jal     clear_output            # zero out output location
        move    $a0, $s1                # load input address into a0
        lw      $a1, 0($s2)             # load shift key into a1
        move    $a2, $s6                # load output address into a2
        jal     rotate                  # call subroutine under test
        move    $a2, $s6                # restore output address
        move    $s7, $s3                # copy expected output

scan:
        lb      $s4, 0($s3)             # load one byte of the expectation
        lb      $s5, 0($a2)             # load one byte of the actual
        bne     $s4, $s5, exit_fail     # if the two differ, the test has failed
        addi    $s3, $s3, 1             # point to next expectation byte
        addi    $a2, $a2, 1             # point to next actual byte
        bne     $s4, $zero, scan        # if one char (and therefore the other) was not null, loop

input_scan:
        addi    $s1, $s1, 1
        lb      $s4, 0($s1)
        bne     $s4, $zero, input_scan

done_scan:
        addi    $s1, $s1, 1             # point to next input word
        addi    $s2, $s2, 4             # point to next shift key
        sub     $s0, $s0, 1             # decrement num of tests left to run
        bgt     $s0, $zero, run_test    # if more than zero tests to run, jump to run_test

exit_ok:
        la      $a0, okmsg              # put address of okmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        li      $v0, 10                 # 10 is exit with zero status (clean exit)
        syscall

exit_fail:
        la      $a0, failmsg            # put address of failmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        move    $a0, $s1                # print input that failed on
        li      $v0, 4
        syscall

        la      $a0, shiftkeymsg
        li      $v0, 4
        syscall

        lb      $a0, 0($s2)             # print shift key that failed on
        li      $v0, 1                  # 1 is print integer
        syscall

        la      $a0, expectedmsg
        li      $v0, 4
        syscall

        move    $a0, $s6                # print actual that failed on
        li      $v0, 4
        syscall

        la      $a0, tobemsg
        li      $v0, 4
        syscall

        move    $a0, $s7                # print expected value that failed on
        li      $v0, 4
        syscall

        li      $a0, 1                  # set error code to 1
        li      $v0, 17                 # 17 is exit with error
        syscall

clear_output:
        sw      $zero, 0($s6)           # zero out output by storing 12 words (48 bytes) of zeros
        sw      $zero, 4($s6)
        sw      $zero, 8($s6)
        sw      $zero, 12($s6)
        sw      $zero, 16($s6)
        sw      $zero, 20($s6)
        sw      $zero, 24($s6)
        sw      $zero, 28($s6)
        sw      $zero, 32($s6)
        sw      $zero, 36($s6)
        sw      $zero, 40($s6)
        sw      $zero, 44($s6)
        jr      $ra

# # Include your implementation here if you wish to run this from the MARS GUI.
# .include "impl.mips"
