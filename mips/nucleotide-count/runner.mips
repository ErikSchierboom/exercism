#
# Test nucleotide_counts with some examples
#
# a0 - input string, for callee
# a1 - pointer to output array, for callee
# s0 - num of tests left to run
# s1 - address of input string
# s2 - address of expected output words
# s3 - char byte of input
# s5 - copy of output location
# t0 - actual output word
# t1 - expected output word

.data

# number of test cases
n: .word 5
# input values and expected output values (all null terminated)
ins:  .asciiz
        "",
        "G",
        "GGGGGGG",
        "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC",
        "AGXXACT"

outs: .word
        0, 0, 0, 0,
        0, 0, 1, 0,
        0, 0, 7, 0,
        20, 12, 17, 21,
        -1, -1, -1, -1

failmsg: .asciiz "failed for test input: "
expectedmsg: .asciiz ". expected "
tobemsg: .asciiz " to be "
okmsg: .asciiz "all tests passed"

listprefix: "["
listseparator: ", "
listsuffix: "]"

.text

runner:
        lw      $s0, n
        la      $s1, ins
        la      $s2, outs

        li      $v0, 9                  # code for allocating heap memory
        li      $a0, 16                 # specify 16 bytes - size of array
        syscall
        move    $s5, $v0                # location of allocated memory is where callee writes result

run_test:
        jal     clear_output            # zero out output location
        move    $a0, $s1                # load input value into a0
        move    $a1, $s5
        jal     nucleotide_counts       # call subroutine under test

        lw      $t0, 0($s2)
        lw      $t1, 0($s5)
        bne     $t0, $t1, exit_fail     # Compare A counts

        lw      $t0, 4($s2)
        lw      $t1, 4($s5)
        bne     $t0, $t1, exit_fail     # Compare C counts

        lw      $t0, 8($s2)
        lw      $t1, 8($s5)
        bne     $t0, $t1, exit_fail     # Compare G counts

        lw      $t0, 12($s2)
        lw      $t1, 12($s5)
        bne     $t0, $t1, exit_fail     # Compare T counts

input_scan:
        lb      $s3, 0($s1)
        addi    $s1, $s1, 1
        bne     $s3, $zero, input_scan

done_scan:
        addi    $s2, $s2, 16
        subi    $s0, $s0, 1             # decrement num of tests left to run
        bgt     $s0, $zero, run_test    # if more than zero tests to run, jump to run_test

exit_ok:
        la      $a0, okmsg              # put address of okmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        li      $v0, 10                 # 10 is exit with zero status (clean exit)
        syscall

exit_fail:
        la      $a0, failmsg            # put address of failmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        move    $a0, $s1                # print input that failed on
        li      $v0, 4
        syscall

        la      $a0, expectedmsg
        li      $v0, 4
        syscall

        move    $a0, $s5                # address of actual counts
        jal     print_list

        la      $a0, tobemsg
        li      $v0, 4
        syscall

        move    $a0, $s2                # address of expected counts
        jal     print_list

        li      $a0, 1                  # set error code to 1
        li      $v0, 17                 # 17 is exit with error
        syscall

clear_output:
        sw      $zero, 0($s5)           # zero out output by storing 4 words (16 bytes) of zeros
        sw      $zero, 4($s5)
        sw      $zero, 8($s5)
        sw      $zero, 12($s5)
        jr      $ra

print_list:
        move    $t2, $a0

        la      $a0, listprefix
        li      $v0, 4
        syscall

        lw      $a0, 0($t2)             # A count
        li      $v0, 1
        syscall

        la      $a0, listseparator
        li      $v0, 4
        syscall

        lw      $a0, 4($t2)             # C count
        li      $v0, 1
        syscall

        la      $a0, listseparator
        li      $v0, 4
        syscall

        lw      $a0, 8($t2)             # G count
        li      $v0, 1
        syscall

        la      $a0, listseparator
        li      $v0, 4
        syscall

        lw      $a0, 12($t2)            # T count
        li      $v0, 1
        syscall

        la      $a0, listsuffix
        li      $v0, 4
        syscall

        jr      $ra

# # Include your implementation here if you wish to run this from the MARS GUI.
# .include "impl.mips"
