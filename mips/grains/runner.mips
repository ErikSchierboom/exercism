#
# Test square with some examples
#
# s0 - num of tests left to run
# s1 - address of input word
# s2 - address of expected low output word
# s3 - address of expected high output word
# s4 - input word
# s5 - low output word
# s6 - high output word
#
# square must:
# - be named square and declared as global
# - read input integer from a0
# - follow the convention of using the t0-9 registers for temporary storage
# - (if it wants to use s0-7 then it is responsible for pushing existing values to the stack then popping them back off before returning)
# - write low word of integer result to v0
# - write high word of integer result to v1

.data

n: .word 10  # number of test cases
ins: .word 1, 2, 3, 4, 16, 32, 64, 0, -1, 65  # input numbers
lows: .word 1, 2, 4, 8, 32768, 2147483648, 0, 0, 0, 0  # expected result (low word)
highs: .word 0, 0, 0, 0, 0, 0, 2147483648, 0, 0, 0  # expected result (high word)

failmsg: .asciiz "failed for test input: "
expectedmsg: .asciiz ". expected "
commamsg: .asciiz ", "
tobemsg: .asciiz " to be "
okmsg: .asciiz "all tests passed"


.text

runner:
        lw      $s0, n
        la      $s1, ins
        la      $s2, lows
        la      $s3, highs

run_test:
        lw      $s4, 0($s1)             # read input from memory
        move    $a0, $s4                # move it to a0
        jal     square                  # call subroutine under test
        move    $s5, $v0                # move return value in v0 to s5 because we need v0 for syscall
        move    $s6, $v1                # move return value in v1 to s6

        lw      $t0, 0($s2)             # read expected low output from memory
        bne     $t0, $s5, exit_fail     # if expected doesn't match actual, jump to fail
        lw      $t1, 0($s3)             # read expected high output from memory
        bne     $t1, $s6, exit_fail     # if expected doesn't match actual, jump to fail

        addi    $s1, $s1, 4             # move to next word in input
        addi    $s2, $s2, 4             # move to next low word in output
        addi    $s3, $s3, 4             # move to next high word in output
        sub     $s0, $s0, 1             # decrement num of tests left to run
        bgt     $s0, $zero, run_test    # if more than zero tests to run, jump to run_test

exit_ok:
        la      $a0, okmsg              # put address of okmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        li      $v0, 10                 # 10 is exit with zero status (clean exit)
        syscall

exit_fail:
        la      $a0, failmsg            # put address of failmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        move    $a0, $s4                # set arg of syscall to input that failed the test
        li      $v0, 1                  # 1 is print int
        syscall

        la      $a0, expectedmsg
        li      $v0, 4
        syscall

        move    $a0, $s5                # print actual low that failed on
        li      $v0, 1
        syscall

        la      $a0, commamsg
        li      $v0, 4
        syscall

        move    $a0, $s6                # print actual high that failed on
        li      $v0, 1
        syscall

        la      $a0, tobemsg
        li      $v0, 4
        syscall

        lw      $a0, 0($s2)             # print expected low value that failed on
        li      $v0, 1
        syscall

        la      $a0, commamsg
        li      $v0, 4
        syscall

        lw      $a0, 0($s3)             # print expected high value that failed on
        li      $v0, 1
        syscall

        li      $a0, 1                  # set exit code to 1
        li      $v0, 17                 # terminate with the exit code in $a0
        syscall

# # Include your implementation here if you wish to run this from the MARS GUI.
# .include "impl.mips"

